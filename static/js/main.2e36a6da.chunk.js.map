{"version":3,"sources":["Pong.js","Snake.js","App.js","index.js"],"names":["game","difficulty","canv","document","querySelector","ctx","getContext","width","height","cw","ch","ballX","ballSize","ballY","ballSpeedX","ballSpeedY","playerY","aiY","playerPoints","aiPoints","topCanv","offsetTop","table","fillStyle","fillRect","i","player","ai","ball","playerX","speedUp","aiX","addEventListener","e","clientY","paddleHeight","score","font","fillText","concat","myin","setInterval","midPaddle","midBall","aiPositionEasy","clearInterval","aiPositionHard","Pong","react_default","a","createElement","onClick","play","getElementById","fx","Math","floor","random","fy","moveX","moveY","trail","x","y","board","snake","length","box","tail","push","head","pop","unshift","food","keyCode","Snake","id","App","react_router_dom","react_router","path","component","to","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.2e36a6da.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./game.css\";\r\nconst Pong = () => {\r\n  return (\r\n    <div>\r\n      <p>Game </p>\r\n      <p>Wybierz poziom: </p>\r\n      <button onClick={() => game(\"easy\")}>≈Åatwy</button>\r\n      <button onClick={() => game(\"hard\")}>Trudny</button>\r\n      <br />\r\n      <br />\r\n      <canvas />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst game = difficulty => {\r\n  const canv = document.querySelector(\"canvas\");\r\n  const ctx = canv.getContext(\"2d\");\r\n\r\n  canv.width = 1000;\r\n  canv.height = 500;\r\n\r\n  const cw = canv.width;\r\n  const ch = canv.height;\r\n  const paddleWidth = 20;\r\n  const paddleHeight = 100;\r\n  const ballSize = 20;\r\n\r\n  let ballX = cw / 2 - ballSize / 2;\r\n  let ballY = ch / 2 - ballSize / 2;\r\n\r\n  let ballSpeedX = 4;\r\n  let ballSpeedY = 4;\r\n\r\n  const playerX = 70;\r\n  let playerY = 200;\r\n\r\n  const aiX = 910;\r\n  let aiY = 200;\r\n\r\n  let playerPoints = 0;\r\n  let aiPoints = 0;\r\n\r\n  const topCanv = canv.offsetTop;\r\n\r\n  const table = () => {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.fillRect(0, 0, cw, ch);\r\n    ctx.fillStyle = \"gray\";\r\n\r\n    for (let i = 6; i < ch; i += 20) {\r\n      ctx.fillRect(cw / 2 - 3, i, 6, 16);\r\n    }\r\n  };\r\n\r\n  const player = () => {\r\n    ctx.fillStyle = \"green\";\r\n    ctx.fillRect(playerX, playerY, paddleWidth, paddleHeight);\r\n  };\r\n\r\n  const ai = () => {\r\n    ctx.fillStyle = \"yellow\";\r\n    ctx.fillRect(aiX, aiY, paddleWidth, paddleHeight);\r\n  };\r\n\r\n  const ball = () => {\r\n    ctx.fillStyle = \"white\";\r\n    ctx.fillRect(ballX, ballY, ballSize, ballSize);\r\n\r\n    ballX += ballSpeedX;\r\n    ballY += ballSpeedY;\r\n\r\n    if (ballY + ballSize >= ch || ballY <= 0) {\r\n      ballSpeedY = -ballSpeedY;\r\n    }\r\n\r\n    if (ballX + ballSize >= cw) {\r\n      playerPoints++;\r\n\r\n      ballX = cw / 2 - ballSize / 2;\r\n      ballY = ch / 2 - ballSize / 2;\r\n\r\n      ballSpeedX = 4;\r\n    } else if (ballX <= 0) {\r\n      aiPoints++;\r\n\r\n      ballSpeedX = 4;\r\n      ballX = cw / 2 - ballSize / 2;\r\n      ballY = ch / 2 - ballSize / 2;\r\n    }\r\n\r\n    if (\r\n      (ballX <= playerX + paddleWidth &&\r\n        ballX >= playerX &&\r\n        ballY >= playerY &&\r\n        ballY + ballSize <= playerY + paddleHeight) ||\r\n      (ballX <= playerX + paddleWidth &&\r\n        ballX >= playerX &&\r\n        ballY + ballSize >= playerY &&\r\n        ballY <= playerY + paddleHeight)\r\n    ) {\r\n      ballSpeedX = -ballSpeedX;\r\n\r\n      speedUp();\r\n    }\r\n\r\n    if (\r\n      (ballX + ballSize >= aiX &&\r\n        ballX + ballSize < aiX + paddleWidth &&\r\n        ballY >= aiY &&\r\n        ballY + ballSize <= aiY + paddleHeight) ||\r\n      (ballX + ballSize >= aiX &&\r\n        ballX + ballSize < aiX + paddleWidth &&\r\n        ballY + ballSize >= aiY &&\r\n        ballY <= aiY + paddleHeight)\r\n    ) {\r\n      ballSpeedX = -ballSpeedX;\r\n\r\n      speedUp();\r\n    }\r\n  };\r\n\r\n  const playerPosition = e => {\r\n    playerY = e.clientY - topCanv - paddleHeight / 2;\r\n\r\n    if (playerY <= 0) {\r\n      playerY = 0;\r\n    }\r\n\r\n    if (playerY >= ch - paddleHeight) {\r\n      playerY = ch - paddleHeight;\r\n    }\r\n  };\r\n\r\n  const aiPositionHard = () => {\r\n    const midPaddle = aiY + paddleHeight / 2;\r\n    const midBall = ballY + ballSize / 2;\r\n\r\n    if (ballX > 500) {\r\n      if (midPaddle - midBall > 150) {\r\n        aiY -= 25;\r\n      } else if (midPaddle - midBall > 50 && midPaddle - midBall < 150) {\r\n        aiY -= 8;\r\n      } else if (midPaddle - midBall < -150) {\r\n        aiY += 25;\r\n      } else if (midPaddle - midBall < -50 && midPaddle - midBall > -150) {\r\n        aiY += 8;\r\n      }\r\n    } else if (ballX <= 500 && ballX > 200) {\r\n      if (midPaddle - midBall > 250) {\r\n        aiY -= 2;\r\n      } else if (midPaddle - midBall < -250) {\r\n        aiY += 2;\r\n      }\r\n    }\r\n\r\n    if (aiY >= ch - paddleHeight) {\r\n      aiY = ch - paddleHeight;\r\n    }\r\n\r\n    if (aiY <= 0) {\r\n      aiY = 0;\r\n    }\r\n  };\r\n\r\n  const aiPositionEasy = () => {\r\n    const midPaddle = aiY + paddleHeight / 2;\r\n    const midBall = ballY + ballSize / 2;\r\n\r\n    if (ballX > 500) {\r\n      if (midPaddle - midBall > 200) {\r\n        aiY -= 12;\r\n      } else if (midPaddle - midBall > 50) {\r\n        aiY -= 5;\r\n      } else if (midPaddle - midBall < -200) {\r\n        aiY += 12;\r\n      } else if (midPaddle - midBall < -50) {\r\n        aiY += 5;\r\n      }\r\n    } else if (ballX <= 500 && ballX > 200) {\r\n      if (midPaddle - midBall > 250) {\r\n        aiY -= 1;\r\n      } else if (midPaddle - midBall < -250) {\r\n        aiY += 1;\r\n      }\r\n    }\r\n\r\n    if (aiY >= ch - paddleHeight) {\r\n      aiY = ch - paddleHeight;\r\n    }\r\n\r\n    if (aiY <= 0) {\r\n      aiY = 0;\r\n    }\r\n  };\r\n\r\n  canv.addEventListener(\"mousemove\", playerPosition);\r\n\r\n  const speedUp = () => {\r\n    if (ballSpeedX > 0 && ballSpeedX < 18) {\r\n      ballSpeedX += 0.6;\r\n    } else if (ballSpeedX < 0 && ballSpeedX > -18) {\r\n      ballSpeedX -= 0.6;\r\n    }\r\n  };\r\n\r\n  const score = () => {\r\n    ctx.fillStyle = \"white\";\r\n    ctx.font = \"30px Arial Black\";\r\n    ctx.fillText(`Gracz: ${playerPoints}`, 300, 25, 100);\r\n\r\n    ctx.fillText(`Komputer: ${aiPoints}`, 550, 25, 400);\r\n  };\r\n\r\n  if (difficulty === \"easy\") {\r\n    function playEasy() {\r\n      table();\r\n      ball();\r\n      player();\r\n      ai();\r\n      aiPositionEasy();\r\n      score();\r\n\r\n      if (aiPoints >= 7 || playerPoints >= 7) {\r\n        clearInterval(myin);\r\n      }\r\n    }\r\n\r\n    let myin = setInterval(playEasy, 1000 / 60);\r\n  }\r\n\r\n  if (difficulty === \"hard\") {\r\n    function playHard() {\r\n      table();\r\n      ball();\r\n      player();\r\n      ai();\r\n      aiPositionHard();\r\n      score();\r\n      if (aiPoints >= 7 || playerPoints >= 7) {\r\n        clearInterval(myin);\r\n      }\r\n    }\r\n\r\n    let myin = setInterval(playHard, 1000 / 60);\r\n  }\r\n};\r\n\r\nexport default Pong;\r\n","import React from \"react\";\r\n\r\nconst Snake = () => {\r\n  return (\r\n    <div>\r\n      <p>Snake</p>\r\n      <br />\r\n      <button onClick={() => play()}> Graj </button>\r\n      <br />\r\n      <canvas id=\"snake\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst play = () => {\r\n  const canv = document.getElementById(\"snake\");\r\n  const ctx = canv.getContext(\"2d\");\r\n\r\n  canv.width = 400;\r\n  canv.height = 400;\r\n  const box = 20;\r\n  const start = 0;\r\n  const end = 19;\r\n  let fx = Math.floor(Math.random() * 19);\r\n  let fy = Math.floor(Math.random() * 19);\r\n  let moveX = -1;\r\n  let moveY = 0;\r\n  let trail = [\r\n    {\r\n      x: 8,\r\n      y: 9\r\n    },\r\n    {\r\n      x: 9,\r\n      y: 9\r\n    },\r\n    {\r\n      x: 10,\r\n      y: 9\r\n    }\r\n  ];\r\n\r\n  const board = () => {\r\n    ctx.fillStyle = \"black\";\r\n    ctx.fillRect(0, 0, canv.width, canv.height);\r\n  };\r\n\r\n  const snake = () => {\r\n    if (trail[0].x < start) {\r\n      trail[0].x = end;\r\n    } else if (trail[0].x > end) {\r\n      trail[0].x = start;\r\n    } else if (trail[0].y < start) {\r\n      trail[0].y = end;\r\n    } else if (trail[0].y > end) {\r\n      trail[0].y = start;\r\n    }\r\n\r\n    ctx.fillStyle = \"lime\";\r\n\r\n    for (let i = 0; i < trail.length; i++) {\r\n      ctx.fillRect(trail[i].x * box, trail[i].y * box, box - 2, box - 2);\r\n\r\n      if (i > 0) {\r\n        if (trail[0].x === trail[i].x && trail[0].y === trail[i].y) {\r\n          trail = [\r\n            {\r\n              x: 8,\r\n              y: 9\r\n            },\r\n            {\r\n              x: 9,\r\n              y: 9\r\n            },\r\n            {\r\n              x: 10,\r\n              y: 9\r\n            }\r\n          ];\r\n        }\r\n      }\r\n    }\r\n\r\n    let tail = {};\r\n\r\n    if (trail[0].x === fx && trail[0].y === fy) {\r\n      fx = Math.floor(Math.random() * 19);\r\n      fy = Math.floor(Math.random() * 19);\r\n\r\n      tail = {\r\n        x: (trail[trail.length - 1].x += moveX),\r\n        y: (trail[trail.length - 1].y += moveY)\r\n      };\r\n\r\n      trail.push(tail);\r\n    }\r\n    let head = {};\r\n    let x = trail[0].x;\r\n    let y = trail[0].y;\r\n    trail.pop();\r\n    x += moveX;\r\n    y += moveY;\r\n    head = {\r\n      x,\r\n      y\r\n    };\r\n    trail.unshift(head);\r\n  };\r\n\r\n  const food = () => {\r\n    ctx.fillStyle = \"red\";\r\n\r\n    ctx.fillRect(fx * box, fy * box, box - 2, box - 2);\r\n  };\r\n\r\n  const snakeMove = e => {\r\n    switch (e.keyCode) {\r\n      case 37:\r\n        if (moveX !== 1) {\r\n          moveX = -1;\r\n          moveY = 0;\r\n        }\r\n        break;\r\n      case 38:\r\n        if (moveY !== 1) {\r\n          moveY = -1;\r\n          moveX = 0;\r\n        }\r\n        break;\r\n      case 39:\r\n        if (moveX !== -1) {\r\n          moveX = 1;\r\n          moveY = 0;\r\n        }\r\n        break;\r\n      case 40:\r\n        if (moveY !== -1) {\r\n          moveY = 1;\r\n          moveX = 0;\r\n        }\r\n\r\n        break;\r\n    }\r\n  };\r\n\r\n  function game() {\r\n    board();\r\n    food();\r\n    snake();\r\n  }\r\n\r\n  document.addEventListener(\"keydown\", snakeMove);\r\n\r\n  setInterval(game, 1000 / 15);\r\n};\r\n\r\nexport default Snake;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Pong from \"./Pong\";\nimport Snake from \"./Snake\";\nimport { Route, BrowserRouter as Router, Link } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Route path=\"/snake\" component={Snake} />\n        <Route path=\"/pong\" component={Pong} />\n        <Link to=\"/snake\">\n          <button>SNAKE</button>\n        </Link>\n\n        <Link to=\"/pong\">\n          <button>PONG</button>\n        </Link>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}